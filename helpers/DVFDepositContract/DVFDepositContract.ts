/* eslint-disable @typescript-eslint/ban-tslint-comment -- Autogenerated file */
/* eslint-disable @eslint-community/eslint-comments/require-description -- Autogenerated file */
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers'
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from './common'

export declare namespace BridgeVM {
  export type CallStruct = {
    target: AddressLike
    value: BigNumberish
    data: BytesLike
  }

  export type CallStructOutput = [target: string, value: bigint, data: string] & {
    target: string
    value: bigint
    data: string
  }
}

export interface DVFDepositContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'addFunds'
      | 'addFundsNative'
      | 'allowDeposits'
      | 'allowDepositsGlobal'
      | 'authorize'
      | 'authorized'
      | 'checkMaxDepositAmount'
      | 'createVMContract'
      | 'deposit'
      | 'depositNative'
      | 'depositNativeWithId'
      | 'depositWithId'
      | 'depositWithPermit'
      | 'depositsDisallowed'
      | 'initialize'
      | 'maxDepositAmount'
      | 'owner'
      | 'processedWithdrawalIds'
      | 'removeFunds'
      | 'removeFundsNative'
      | 'renounceOwnership'
      | 'transferOwner'
      | 'transferOwnership'
      | 'withdrawNativeV2'
      | 'withdrawV2'
      | 'withdrawV2WithNative'
      | 'withdrawV2WithNativeNoEvent'
      | 'withdrawVmFunds'
      | 'withdrawWithData'
      | 'withdrawWithDataNoEvent',
  ): FunctionFragment

  getEvent(
    nameOrSignatureOrTopic:
      | 'BridgedDeposit'
      | 'BridgedDepositWithId'
      | 'BridgedWithdrawal'
      | 'BridgedWithdrawalWithData'
      | 'BridgedWithdrawalWithNative'
      | 'Initialized'
      | 'OwnershipTransferred',
  ): EventFragment

  encodeFunctionData(functionFragment: 'addFunds', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'addFundsNative', values?: undefined): string
  encodeFunctionData(functionFragment: 'allowDeposits', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'allowDepositsGlobal', values: [boolean]): string
  encodeFunctionData(functionFragment: 'authorize', values: [AddressLike, boolean]): string
  encodeFunctionData(functionFragment: 'authorized', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'checkMaxDepositAmount', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'createVMContract', values?: undefined): string
  encodeFunctionData(functionFragment: 'deposit', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'depositNative', values?: undefined): string
  encodeFunctionData(functionFragment: 'depositNativeWithId', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'depositWithId', values: [AddressLike, BigNumberish, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'depositWithPermit',
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'depositsDisallowed', values?: undefined): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(functionFragment: 'maxDepositAmount', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'processedWithdrawalIds', values: [string]): string
  encodeFunctionData(functionFragment: 'removeFunds', values: [AddressLike, AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'removeFundsNative', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwner', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [AddressLike]): string
  encodeFunctionData(functionFragment: 'withdrawNativeV2', values: [AddressLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'withdrawV2', values: [AddressLike, AddressLike, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'withdrawV2WithNative',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawV2WithNativeNoEvent',
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'withdrawVmFunds', values: [AddressLike]): string
  encodeFunctionData(
    functionFragment: 'withdrawWithData',
    values: [AddressLike, BigNumberish, BigNumberish, BridgeVM.CallStruct[], BytesLike],
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawWithDataNoEvent',
    values: [AddressLike, BigNumberish, BigNumberish, BridgeVM.CallStruct[]],
  ): string

  decodeFunctionResult(functionFragment: 'addFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addFundsNative', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowDeposits', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowDepositsGlobal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'authorize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'authorized', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkMaxDepositAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createVMContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositNative', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositNativeWithId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositWithId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositWithPermit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'depositsDisallowed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxDepositAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'processedWithdrawalIds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeFundsNative', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawNativeV2', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawV2', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawV2WithNative', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawV2WithNativeNoEvent', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawVmFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawWithData', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdrawWithDataNoEvent', data: BytesLike): Result
}

export namespace BridgedDepositEvent {
  export type InputTuple = [user: AddressLike, token: AddressLike, amount: BigNumberish]
  export type OutputTuple = [user: string, token: string, amount: bigint]
  export interface OutputObject {
    user: string
    token: string
    amount: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace BridgedDepositWithIdEvent {
  export type InputTuple = [
    sender: AddressLike,
    origin: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    commitmentId: BigNumberish,
  ]
  export type OutputTuple = [sender: string, origin: string, token: string, amount: bigint, commitmentId: bigint]
  export interface OutputObject {
    sender: string
    origin: string
    token: string
    amount: bigint
    commitmentId: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace BridgedWithdrawalEvent {
  export type InputTuple = [user: AddressLike, token: AddressLike, amount: BigNumberish, withdrawalId: string]
  export type OutputTuple = [user: string, token: string, amount: bigint, withdrawalId: string]
  export interface OutputObject {
    user: string
    token: string
    amount: bigint
    withdrawalId: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace BridgedWithdrawalWithDataEvent {
  export type InputTuple = [token: AddressLike, amountToken: BigNumberish, amountNative: BigNumberish, ref: BytesLike]
  export type OutputTuple = [token: string, amountToken: bigint, amountNative: bigint, ref: string]
  export interface OutputObject {
    token: string
    amountToken: bigint
    amountNative: bigint
    ref: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace BridgedWithdrawalWithNativeEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amountToken: BigNumberish,
    amountNative: BigNumberish,
  ]
  export type OutputTuple = [user: string, token: string, amountToken: bigint, amountNative: bigint]
  export interface OutputObject {
    user: string
    token: string
    amountToken: bigint
    amountNative: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish]
  export type OutputTuple = [version: bigint]
  export interface OutputObject {
    version: bigint
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike]
  export type OutputTuple = [previousOwner: string, newOwner: string]
  export interface OutputObject {
    previousOwner: string
    newOwner: string
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
  export type Filter = TypedDeferredTopicFilter<Event>
  export type Log = TypedEventLog<Event>
  export type LogDescription = TypedLogDescription<Event>
}

export interface DVFDepositContract extends BaseContract {
  connect(runner?: ContractRunner | null): DVFDepositContract
  waitForDeployment(): Promise<this>

  interface: DVFDepositContractInterface

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>

  addFunds: TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>

  addFundsNative: TypedContractMethod<[], [void], 'payable'>

  allowDeposits: TypedContractMethod<[tokenAddress: AddressLike, maxAmount: BigNumberish], [void], 'nonpayable'>

  allowDepositsGlobal: TypedContractMethod<[value: boolean], [void], 'nonpayable'>

  authorize: TypedContractMethod<[user: AddressLike, value: boolean], [void], 'nonpayable'>

  authorized: TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>

  checkMaxDepositAmount: TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'view'>

  createVMContract: TypedContractMethod<[], [void], 'nonpayable'>

  deposit: TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>

  depositNative: TypedContractMethod<[], [void], 'payable'>

  depositNativeWithId: TypedContractMethod<[commitmentId: BigNumberish], [void], 'payable'>

  depositWithId: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, commitmentId: BigNumberish],
    [void],
    'nonpayable'
  >

  depositWithPermit: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      commitmentId: BigNumberish,
    ],
    [void],
    'nonpayable'
  >

  depositsDisallowed: TypedContractMethod<[], [boolean], 'view'>

  initialize: TypedContractMethod<[], [void], 'nonpayable'>

  maxDepositAmount: TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>

  owner: TypedContractMethod<[], [string], 'view'>

  processedWithdrawalIds: TypedContractMethod<[arg0: string], [boolean], 'view'>

  removeFunds: TypedContractMethod<[token: AddressLike, to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>

  removeFundsNative: TypedContractMethod<[to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>

  renounceOwnership: TypedContractMethod<[], [void], 'view'>

  transferOwner: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>

  transferOwnership: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>

  withdrawNativeV2: TypedContractMethod<[to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>

  withdrawV2: TypedContractMethod<[token: AddressLike, to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>

  withdrawV2WithNative: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amountToken: BigNumberish, amountNative: BigNumberish],
    [void],
    'nonpayable'
  >

  withdrawV2WithNativeNoEvent: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amountToken: BigNumberish, amountNative: BigNumberish],
    [void],
    'nonpayable'
  >

  withdrawVmFunds: TypedContractMethod<[token: AddressLike], [void], 'nonpayable'>

  withdrawWithData: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      amountNative: BigNumberish,
      datas: BridgeVM.CallStruct[],
      ref: BytesLike,
    ],
    [void],
    'nonpayable'
  >

  withdrawWithDataNoEvent: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, amountNative: BigNumberish, datas: BridgeVM.CallStruct[]],
    [void],
    'nonpayable'
  >

  getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T

  getFunction(
    nameOrSignature: 'addFunds',
  ): TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'addFundsNative'): TypedContractMethod<[], [void], 'payable'>
  getFunction(
    nameOrSignature: 'allowDeposits',
  ): TypedContractMethod<[tokenAddress: AddressLike, maxAmount: BigNumberish], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'allowDepositsGlobal'): TypedContractMethod<[value: boolean], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'authorize',
  ): TypedContractMethod<[user: AddressLike, value: boolean], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'authorized'): TypedContractMethod<[arg0: AddressLike], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'checkMaxDepositAmount',
  ): TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'view'>
  getFunction(nameOrSignature: 'createVMContract'): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'deposit',
  ): TypedContractMethod<[token: AddressLike, amount: BigNumberish], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'depositNative'): TypedContractMethod<[], [void], 'payable'>
  getFunction(
    nameOrSignature: 'depositNativeWithId',
  ): TypedContractMethod<[commitmentId: BigNumberish], [void], 'payable'>
  getFunction(
    nameOrSignature: 'depositWithId',
  ): TypedContractMethod<[token: AddressLike, amount: BigNumberish, commitmentId: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'depositWithPermit',
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      commitmentId: BigNumberish,
    ],
    [void],
    'nonpayable'
  >
  getFunction(nameOrSignature: 'depositsDisallowed'): TypedContractMethod<[], [boolean], 'view'>
  getFunction(nameOrSignature: 'initialize'): TypedContractMethod<[], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'maxDepositAmount'): TypedContractMethod<[arg0: AddressLike], [bigint], 'view'>
  getFunction(nameOrSignature: 'owner'): TypedContractMethod<[], [string], 'view'>
  getFunction(nameOrSignature: 'processedWithdrawalIds'): TypedContractMethod<[arg0: string], [boolean], 'view'>
  getFunction(
    nameOrSignature: 'removeFunds',
  ): TypedContractMethod<[token: AddressLike, to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'removeFundsNative',
  ): TypedContractMethod<[to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'renounceOwnership'): TypedContractMethod<[], [void], 'view'>
  getFunction(nameOrSignature: 'transferOwner'): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>
  getFunction(nameOrSignature: 'transferOwnership'): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'withdrawNativeV2',
  ): TypedContractMethod<[to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'withdrawV2',
  ): TypedContractMethod<[token: AddressLike, to: AddressLike, amount: BigNumberish], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'withdrawV2WithNative',
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amountToken: BigNumberish, amountNative: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'withdrawV2WithNativeNoEvent',
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amountToken: BigNumberish, amountNative: BigNumberish],
    [void],
    'nonpayable'
  >
  getFunction(nameOrSignature: 'withdrawVmFunds'): TypedContractMethod<[token: AddressLike], [void], 'nonpayable'>
  getFunction(
    nameOrSignature: 'withdrawWithData',
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      amountNative: BigNumberish,
      datas: BridgeVM.CallStruct[],
      ref: BytesLike,
    ],
    [void],
    'nonpayable'
  >
  getFunction(
    nameOrSignature: 'withdrawWithDataNoEvent',
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, amountNative: BigNumberish, datas: BridgeVM.CallStruct[]],
    [void],
    'nonpayable'
  >

  getEvent(
    key: 'BridgedDeposit',
  ): TypedContractEvent<
    BridgedDepositEvent.InputTuple,
    BridgedDepositEvent.OutputTuple,
    BridgedDepositEvent.OutputObject
  >
  getEvent(
    key: 'BridgedDepositWithId',
  ): TypedContractEvent<
    BridgedDepositWithIdEvent.InputTuple,
    BridgedDepositWithIdEvent.OutputTuple,
    BridgedDepositWithIdEvent.OutputObject
  >
  getEvent(
    key: 'BridgedWithdrawal',
  ): TypedContractEvent<
    BridgedWithdrawalEvent.InputTuple,
    BridgedWithdrawalEvent.OutputTuple,
    BridgedWithdrawalEvent.OutputObject
  >
  getEvent(
    key: 'BridgedWithdrawalWithData',
  ): TypedContractEvent<
    BridgedWithdrawalWithDataEvent.InputTuple,
    BridgedWithdrawalWithDataEvent.OutputTuple,
    BridgedWithdrawalWithDataEvent.OutputObject
  >
  getEvent(
    key: 'BridgedWithdrawalWithNative',
  ): TypedContractEvent<
    BridgedWithdrawalWithNativeEvent.InputTuple,
    BridgedWithdrawalWithNativeEvent.OutputTuple,
    BridgedWithdrawalWithNativeEvent.OutputObject
  >
  getEvent(
    key: 'Initialized',
  ): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>
  getEvent(
    key: 'OwnershipTransferred',
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >

  filters: {
    'BridgedDeposit(address,address,uint256)': TypedContractEvent<
      BridgedDepositEvent.InputTuple,
      BridgedDepositEvent.OutputTuple,
      BridgedDepositEvent.OutputObject
    >
    BridgedDeposit: TypedContractEvent<
      BridgedDepositEvent.InputTuple,
      BridgedDepositEvent.OutputTuple,
      BridgedDepositEvent.OutputObject
    >

    'BridgedDepositWithId(address,address,address,uint256,uint256)': TypedContractEvent<
      BridgedDepositWithIdEvent.InputTuple,
      BridgedDepositWithIdEvent.OutputTuple,
      BridgedDepositWithIdEvent.OutputObject
    >
    BridgedDepositWithId: TypedContractEvent<
      BridgedDepositWithIdEvent.InputTuple,
      BridgedDepositWithIdEvent.OutputTuple,
      BridgedDepositWithIdEvent.OutputObject
    >

    'BridgedWithdrawal(address,address,uint256,string)': TypedContractEvent<
      BridgedWithdrawalEvent.InputTuple,
      BridgedWithdrawalEvent.OutputTuple,
      BridgedWithdrawalEvent.OutputObject
    >
    BridgedWithdrawal: TypedContractEvent<
      BridgedWithdrawalEvent.InputTuple,
      BridgedWithdrawalEvent.OutputTuple,
      BridgedWithdrawalEvent.OutputObject
    >

    'BridgedWithdrawalWithData(address,uint256,uint256,bytes)': TypedContractEvent<
      BridgedWithdrawalWithDataEvent.InputTuple,
      BridgedWithdrawalWithDataEvent.OutputTuple,
      BridgedWithdrawalWithDataEvent.OutputObject
    >
    BridgedWithdrawalWithData: TypedContractEvent<
      BridgedWithdrawalWithDataEvent.InputTuple,
      BridgedWithdrawalWithDataEvent.OutputTuple,
      BridgedWithdrawalWithDataEvent.OutputObject
    >

    'BridgedWithdrawalWithNative(address,address,uint256,uint256)': TypedContractEvent<
      BridgedWithdrawalWithNativeEvent.InputTuple,
      BridgedWithdrawalWithNativeEvent.OutputTuple,
      BridgedWithdrawalWithNativeEvent.OutputObject
    >
    BridgedWithdrawalWithNative: TypedContractEvent<
      BridgedWithdrawalWithNativeEvent.InputTuple,
      BridgedWithdrawalWithNativeEvent.OutputTuple,
      BridgedWithdrawalWithNativeEvent.OutputObject
    >

    'Initialized(uint8)': TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >

    'OwnershipTransferred(address,address)': TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >
  }
}
